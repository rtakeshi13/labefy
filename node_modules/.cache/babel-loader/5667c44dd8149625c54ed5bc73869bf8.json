{"ast":null,"code":"var _jsxFileName = \"/home/renan/labefy/src/components/SpotifySearch/SpotifySearch.js\";\nimport React, { useState } from \"react\";\nimport { MainContainer, InputGrid, Table, Song, Album, Artist, Track, Add } from \"./styled\";\nimport axios from \"axios\";\n\nfunction SpotifySearch(props) {\n  const {\n    token,\n    postTrack\n  } = props;\n  const [searchInput, setSearch] = useState(\"\");\n  const [tracks, setTracks] = useState();\n  const headersSearchSpotify = {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const urlSearchSpotify = \"https://api.spotify.com/v1/search\";\n\n  async function searchSpotify() {\n    try {\n      const response = await axios.get(urlSearchSpotify + `?q=${searchInput}&type=track&market=BR`, headersSearchSpotify);\n      setTracks(response.data.tracks.items);\n    } catch (err) {\n      setTracks();\n      console.log(err);\n    }\n  }\n\n  function clearSearch() {\n    setTracks();\n    setSearch(\"\");\n  }\n\n  function addTrack(track) {\n    const body = {\n      name: track.name,\n      artist: track.artists.map(item => item.name).join(\", \"),\n      url: track.external_urls.spotify\n    };\n    postTrack(body);\n  }\n\n  const renderedTracks = tracks && /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"colgroup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Song, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Album, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Artist, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Add, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"M\\xFAsica\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, \"Album\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"Artista\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, tracks.map(track => {\n    return /*#__PURE__*/React.createElement(Track, {\n      key: track.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        wordWrap: \"break-word\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    }, track.name), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        wordWrap: \"break-word\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, track.album.name), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        wordWrap: \"break-word\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }, track.artists.map((item, idx, arr) => idx === arr.length - 1 ? item.name : `${item.name}, `)), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        cursor: \"pointer\",\n        color: \"green\"\n      },\n      onClick: () => {\n        addTrack(track);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, \"Adicionar\"));\n  })));\n  return /*#__PURE__*/React.createElement(MainContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(InputGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      fontSize: \"16px\"\n    },\n    placeholder: \"Pesquisar faixas/artistas no Spotify\",\n    value: searchInput,\n    onChange: e => {\n      setSearch(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: searchSpotify,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"Pesquisar\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"Limpar\")), renderedTracks);\n}\n\nexport default SpotifySearch;","map":{"version":3,"sources":["/home/renan/labefy/src/components/SpotifySearch/SpotifySearch.js"],"names":["React","useState","MainContainer","InputGrid","Table","Song","Album","Artist","Track","Add","axios","SpotifySearch","props","token","postTrack","searchInput","setSearch","tracks","setTracks","headersSearchSpotify","headers","Accept","Authorization","urlSearchSpotify","searchSpotify","response","get","data","items","err","console","log","clearSearch","addTrack","track","body","name","artist","artists","map","item","join","url","external_urls","spotify","renderedTracks","id","wordWrap","album","idx","arr","length","cursor","color","fontSize","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  MainContainer,\n  InputGrid,\n  Table,\n  Song,\n  Album,\n  Artist,\n  Track,\n  Add,\n} from \"./styled\";\nimport axios from \"axios\";\n\nfunction SpotifySearch(props) {\n  const { token, postTrack } = props;\n  const [searchInput, setSearch] = useState(\"\");\n  const [tracks, setTracks] = useState();\n\n  const headersSearchSpotify = {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  const urlSearchSpotify = \"https://api.spotify.com/v1/search\";\n\n  async function searchSpotify() {\n    try {\n      const response = await axios.get(\n        urlSearchSpotify + `?q=${searchInput}&type=track&market=BR`,\n        headersSearchSpotify\n      );\n      setTracks(response.data.tracks.items);\n    } catch (err) {\n      setTracks();\n      console.log(err);\n    }\n  }\n\n  function clearSearch() {\n    setTracks();\n    setSearch(\"\");\n  }\n\n  function addTrack(track) {\n    const body = {\n      name: track.name,\n      artist: track.artists.map((item) => item.name).join(\", \"),\n      url: track.external_urls.spotify,\n    };\n    postTrack(body);\n  }\n\n  const renderedTracks = tracks && (\n    <Table>\n      <colgroup>\n        <Song />\n        <Album />\n        <Artist />\n        <Add />\n      </colgroup>\n      <thead>\n        <tr>\n          <th>Música</th>\n          <th>Album</th>\n          <th>Artista</th>\n        </tr>\n      </thead>\n      <tbody>\n        {tracks.map((track) => {\n          return (\n            <Track key={track.id}>\n              <td style={{ wordWrap: \"break-word\" }}>{track.name}</td>\n              <td style={{ wordWrap: \"break-word\" }}>{track.album.name}</td>\n              <td style={{ wordWrap: \"break-word\" }}>\n                {track.artists.map((item, idx, arr) =>\n                  idx === arr.length - 1 ? item.name : `${item.name}, `\n                )}\n              </td>\n              <td\n                style={{ cursor: \"pointer\", color: \"green\" }}\n                onClick={() => {\n                  addTrack(track);\n                }}\n              >\n                Adicionar\n              </td>\n            </Track>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n\n  return (\n    <MainContainer>\n      <hr />\n      <InputGrid>\n        <input\n          style={{ fontSize: \"16px\" }}\n          placeholder=\"Pesquisar faixas/artistas no Spotify\"\n          value={searchInput}\n          onChange={(e) => {\n            setSearch(e.target.value);\n          }}\n        />\n        <button onClick={searchSpotify}>Pesquisar</button>\n        <button onClick={clearSearch}>Limpar</button>\n      </InputGrid>\n      {renderedTracks}\n    </MainContainer>\n  );\n}\n\nexport default SpotifySearch;\n"]},"metadata":{},"sourceType":"module"}